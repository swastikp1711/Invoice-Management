{"version":3,"file":"index.js","sources":["../src/logger.ts","../src/documentIntelligence.ts","../src/isUnexpected.ts","../src/paginateHelper.ts","../src/pollingHelper.ts","../src/index.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"ai-document-intelligence\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getClient, ClientOptions } from \"@azure-rest/core-client\";\nimport { logger } from \"./logger\";\nimport { TokenCredential, KeyCredential } from \"@azure/core-auth\";\nimport { DocumentIntelligenceClient } from \"./clientDefinitions\";\n\n/**\n * Initialize a new instance of `DocumentIntelligenceClient`\n * @param endpoint - The Document Intelligence service endpoint.\n * @param credentials - uniquely identify client credential\n * @param options - the parameter for all optional parameters\n */\nexport default function createClient(\n  endpoint: string,\n  credentials: TokenCredential | KeyCredential,\n  options: ClientOptions = {},\n): DocumentIntelligenceClient {\n  const baseUrl = options.baseUrl ?? `${endpoint}/documentintelligence`;\n  options.apiVersion = options.apiVersion ?? \"2024-02-29-preview\";\n  const userAgentInfo = `azsdk-js-ai-document-intelligence-rest/1.0.0-beta.2`;\n  const userAgentPrefix =\n    options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}`\n      : `${userAgentInfo}`;\n  options = {\n    ...options,\n    userAgentOptions: {\n      userAgentPrefix,\n    },\n    loggingOptions: {\n      logger: options.loggingOptions?.logger ?? logger.info,\n    },\n    credentials: {\n      scopes: options.credentials?.scopes ?? [\"https://cognitiveservices.azure.com/.default\"],\n      apiKeyHeaderName: options.credentials?.apiKeyHeaderName ?? \"Ocp-Apim-Subscription-Key\",\n    },\n  };\n\n  const client = getClient(baseUrl, credentials, options) as DocumentIntelligenceClient;\n\n  return client;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  ListOperations200Response,\n  ListOperationsDefaultResponse,\n  GetDocumentModelBuildOperation200Response,\n  GetDocumentModelComposeOperation200Response,\n  GetDocumentModelCopyToOperation200Response,\n  GetDocumentClassifierBuildOperation200Response,\n  GetOperation200Response,\n  GetDocumentModelBuildOperationDefaultResponse,\n  GetResourceInfo200Response,\n  GetResourceInfoDefaultResponse,\n  GetAnalyzeResult200Response,\n  GetAnalyzeResultDefaultResponse,\n  AnalyzeDocumentFromStream202Response,\n  AnalyzeDocument202Response,\n  AnalyzeDocumentFromStreamLogicalResponse,\n  AnalyzeDocumentLogicalResponse,\n  AnalyzeDocumentFromStreamDefaultResponse,\n  GetModel200Response,\n  GetModelDefaultResponse,\n  DeleteModel204Response,\n  DeleteModelDefaultResponse,\n  BuildModel202Response,\n  BuildModelLogicalResponse,\n  BuildModelDefaultResponse,\n  ComposeModel202Response,\n  ComposeModelLogicalResponse,\n  ComposeModelDefaultResponse,\n  AuthorizeModelCopy200Response,\n  AuthorizeModelCopyDefaultResponse,\n  CopyModelTo202Response,\n  CopyModelToLogicalResponse,\n  CopyModelToDefaultResponse,\n  ListModels200Response,\n  ListModelsDefaultResponse,\n  BuildClassifier202Response,\n  BuildClassifierLogicalResponse,\n  BuildClassifierDefaultResponse,\n  ListClassifiers200Response,\n  ListClassifiersDefaultResponse,\n  GetClassifier200Response,\n  GetClassifierDefaultResponse,\n  DeleteClassifier204Response,\n  DeleteClassifierDefaultResponse,\n  ClassifyDocumentFromStream202Response,\n  ClassifyDocument202Response,\n  ClassifyDocumentFromStreamLogicalResponse,\n  ClassifyDocumentLogicalResponse,\n  ClassifyDocumentFromStreamDefaultResponse,\n  GetClassifyResult200Response,\n  GetClassifyResultDefaultResponse,\n} from \"./responses\";\n\nconst responseMap: Record<string, string[]> = {\n  \"GET /operations\": [\"200\"],\n  \"GET /operations/{operationId}\": [\"200\"],\n  \"GET /info\": [\"200\"],\n  \"GET /documentModels/{modelId}/analyzeResults/{resultId}\": [\"200\"],\n  \"POST /documentModels/{modelId}:analyze\": [\"202\"],\n  \"GET /documentModels/{modelId}:analyze\": [\"200\", \"202\"],\n  \"GET /documentModels/{modelId}\": [\"200\"],\n  \"DELETE /documentModels/{modelId}\": [\"204\"],\n  \"POST /documentModels:build\": [\"202\"],\n  \"GET /documentModels:build\": [\"200\", \"202\"],\n  \"POST /documentModels:compose\": [\"202\"],\n  \"GET /documentModels:compose\": [\"200\", \"202\"],\n  \"POST /documentModels:authorizeCopy\": [\"200\"],\n  \"POST /documentModels/{modelId}:copyTo\": [\"202\"],\n  \"GET /documentModels/{modelId}:copyTo\": [\"200\", \"202\"],\n  \"GET /documentModels\": [\"200\"],\n  \"POST /documentClassifiers:build\": [\"202\"],\n  \"GET /documentClassifiers:build\": [\"200\", \"202\"],\n  \"GET /documentClassifiers\": [\"200\"],\n  \"GET /documentClassifiers/{classifierId}\": [\"200\"],\n  \"DELETE /documentClassifiers/{classifierId}\": [\"204\"],\n  \"POST /documentClassifiers/{classifierId}:analyze\": [\"202\"],\n  \"GET /documentClassifiers/{classifierId}:analyze\": [\"200\", \"202\"],\n  \"GET /documentClassifiers/{classifierId}/analyzeResults/{resultId}\": [\"200\"],\n};\n\nexport function isUnexpected(\n  response: ListOperations200Response | ListOperationsDefaultResponse,\n): response is ListOperationsDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetDocumentModelBuildOperation200Response\n    | GetDocumentModelComposeOperation200Response\n    | GetDocumentModelCopyToOperation200Response\n    | GetDocumentClassifierBuildOperation200Response\n    | GetOperation200Response\n    | GetDocumentModelBuildOperationDefaultResponse,\n): response is GetDocumentModelBuildOperationDefaultResponse;\nexport function isUnexpected(\n  response: GetResourceInfo200Response | GetResourceInfoDefaultResponse,\n): response is GetResourceInfoDefaultResponse;\nexport function isUnexpected(\n  response: GetAnalyzeResult200Response | GetAnalyzeResultDefaultResponse,\n): response is GetAnalyzeResultDefaultResponse;\nexport function isUnexpected(\n  response:\n    | AnalyzeDocumentFromStream202Response\n    | AnalyzeDocument202Response\n    | AnalyzeDocumentFromStreamLogicalResponse\n    | AnalyzeDocumentLogicalResponse\n    | AnalyzeDocumentFromStreamDefaultResponse,\n): response is AnalyzeDocumentFromStreamDefaultResponse;\nexport function isUnexpected(\n  response: GetModel200Response | GetModelDefaultResponse,\n): response is GetModelDefaultResponse;\nexport function isUnexpected(\n  response: DeleteModel204Response | DeleteModelDefaultResponse,\n): response is DeleteModelDefaultResponse;\nexport function isUnexpected(\n  response: BuildModel202Response | BuildModelLogicalResponse | BuildModelDefaultResponse,\n): response is BuildModelDefaultResponse;\nexport function isUnexpected(\n  response: ComposeModel202Response | ComposeModelLogicalResponse | ComposeModelDefaultResponse,\n): response is ComposeModelDefaultResponse;\nexport function isUnexpected(\n  response: AuthorizeModelCopy200Response | AuthorizeModelCopyDefaultResponse,\n): response is AuthorizeModelCopyDefaultResponse;\nexport function isUnexpected(\n  response: CopyModelTo202Response | CopyModelToLogicalResponse | CopyModelToDefaultResponse,\n): response is CopyModelToDefaultResponse;\nexport function isUnexpected(\n  response: ListModels200Response | ListModelsDefaultResponse,\n): response is ListModelsDefaultResponse;\nexport function isUnexpected(\n  response:\n    | BuildClassifier202Response\n    | BuildClassifierLogicalResponse\n    | BuildClassifierDefaultResponse,\n): response is BuildClassifierDefaultResponse;\nexport function isUnexpected(\n  response: ListClassifiers200Response | ListClassifiersDefaultResponse,\n): response is ListClassifiersDefaultResponse;\nexport function isUnexpected(\n  response: GetClassifier200Response | GetClassifierDefaultResponse,\n): response is GetClassifierDefaultResponse;\nexport function isUnexpected(\n  response: DeleteClassifier204Response | DeleteClassifierDefaultResponse,\n): response is DeleteClassifierDefaultResponse;\nexport function isUnexpected(\n  response:\n    | ClassifyDocumentFromStream202Response\n    | ClassifyDocument202Response\n    | ClassifyDocumentFromStreamLogicalResponse\n    | ClassifyDocumentLogicalResponse\n    | ClassifyDocumentFromStreamDefaultResponse,\n): response is ClassifyDocumentFromStreamDefaultResponse;\nexport function isUnexpected(\n  response: GetClassifyResult200Response | GetClassifyResultDefaultResponse,\n): response is GetClassifyResultDefaultResponse;\nexport function isUnexpected(\n  response:\n    | ListOperations200Response\n    | ListOperationsDefaultResponse\n    | GetDocumentModelBuildOperation200Response\n    | GetDocumentModelComposeOperation200Response\n    | GetDocumentModelCopyToOperation200Response\n    | GetDocumentClassifierBuildOperation200Response\n    | GetOperation200Response\n    | GetDocumentModelBuildOperationDefaultResponse\n    | GetResourceInfo200Response\n    | GetResourceInfoDefaultResponse\n    | GetAnalyzeResult200Response\n    | GetAnalyzeResultDefaultResponse\n    | AnalyzeDocumentFromStream202Response\n    | AnalyzeDocument202Response\n    | AnalyzeDocumentFromStreamLogicalResponse\n    | AnalyzeDocumentLogicalResponse\n    | AnalyzeDocumentFromStreamDefaultResponse\n    | GetModel200Response\n    | GetModelDefaultResponse\n    | DeleteModel204Response\n    | DeleteModelDefaultResponse\n    | BuildModel202Response\n    | BuildModelLogicalResponse\n    | BuildModelDefaultResponse\n    | ComposeModel202Response\n    | ComposeModelLogicalResponse\n    | ComposeModelDefaultResponse\n    | AuthorizeModelCopy200Response\n    | AuthorizeModelCopyDefaultResponse\n    | CopyModelTo202Response\n    | CopyModelToLogicalResponse\n    | CopyModelToDefaultResponse\n    | ListModels200Response\n    | ListModelsDefaultResponse\n    | BuildClassifier202Response\n    | BuildClassifierLogicalResponse\n    | BuildClassifierDefaultResponse\n    | ListClassifiers200Response\n    | ListClassifiersDefaultResponse\n    | GetClassifier200Response\n    | GetClassifierDefaultResponse\n    | DeleteClassifier204Response\n    | DeleteClassifierDefaultResponse\n    | ClassifyDocumentFromStream202Response\n    | ClassifyDocument202Response\n    | ClassifyDocumentFromStreamLogicalResponse\n    | ClassifyDocumentLogicalResponse\n    | ClassifyDocumentFromStreamDefaultResponse\n    | GetClassifyResult200Response\n    | GetClassifyResultDefaultResponse,\n): response is\n  | ListOperationsDefaultResponse\n  | GetDocumentModelBuildOperationDefaultResponse\n  | GetResourceInfoDefaultResponse\n  | GetAnalyzeResultDefaultResponse\n  | AnalyzeDocumentFromStreamDefaultResponse\n  | GetModelDefaultResponse\n  | DeleteModelDefaultResponse\n  | BuildModelDefaultResponse\n  | ComposeModelDefaultResponse\n  | AuthorizeModelCopyDefaultResponse\n  | CopyModelToDefaultResponse\n  | ListModelsDefaultResponse\n  | BuildClassifierDefaultResponse\n  | ListClassifiersDefaultResponse\n  | GetClassifierDefaultResponse\n  | DeleteClassifierDefaultResponse\n  | ClassifyDocumentFromStreamDefaultResponse\n  | GetClassifyResultDefaultResponse {\n  const lroOriginal = response.headers[\"x-ms-original-url\"];\n  const url = new URL(lroOriginal ?? response.request.url);\n  const method = response.request.method;\n  let pathDetails = responseMap[`${method} ${url.pathname}`];\n  if (!pathDetails) {\n    pathDetails = getParametrizedPathSuccess(method, url.pathname);\n  }\n  return !pathDetails.includes(response.status);\n}\n\nfunction getParametrizedPathSuccess(method: string, path: string): string[] {\n  const pathParts = path.split(\"/\");\n\n  // Traverse list to match the longest candidate\n  // matchedLen: the length of candidate path\n  // matchedValue: the matched status code array\n  let matchedLen = -1,\n    matchedValue: string[] = [];\n\n  // Iterate the responseMap to find a match\n  for (const [key, value] of Object.entries(responseMap)) {\n    // Extracting the path from the map key which is in format\n    // GET /path/foo\n    if (!key.startsWith(method)) {\n      continue;\n    }\n    const candidatePath = getPathFromMapKey(key);\n    // Get each part of the url path\n    const candidateParts = candidatePath.split(\"/\");\n\n    // track if we have found a match to return the values found.\n    let found = true;\n    for (let i = candidateParts.length - 1, j = pathParts.length - 1; i >= 1 && j >= 1; i--, j--) {\n      if (candidateParts[i]?.startsWith(\"{\") && candidateParts[i]?.indexOf(\"}\") !== -1) {\n        const start = candidateParts[i]!.indexOf(\"}\") + 1,\n          end = candidateParts[i]?.length;\n        // If the current part of the candidate is a \"template\" part\n        // Try to use the suffix of pattern to match the path\n        // {guid} ==> $\n        // {guid}:export ==> :export$\n        const isMatched = new RegExp(`${candidateParts[i]?.slice(start, end)}`).test(\n          pathParts[j] || \"\",\n        );\n\n        if (!isMatched) {\n          found = false;\n          break;\n        }\n        continue;\n      }\n\n      // If the candidate part is not a template and\n      // the parts don't match mark the candidate as not found\n      // to move on with the next candidate path.\n      if (candidateParts[i] !== pathParts[j]) {\n        found = false;\n        break;\n      }\n    }\n\n    // We finished evaluating the current candidate parts\n    // Update the matched value if and only if we found the longer pattern\n    if (found && candidatePath.length > matchedLen) {\n      matchedLen = candidatePath.length;\n      matchedValue = value;\n    }\n  }\n\n  return matchedValue;\n}\n\nfunction getPathFromMapKey(mapKey: string): string {\n  const pathStart = mapKey.indexOf(\"/\");\n  return mapKey.slice(pathStart);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getPagedAsyncIterator, PagedAsyncIterableIterator, PagedResult } from \"@azure/core-paging\";\nimport { Client, createRestError, PathUncheckedResponse } from \"@azure-rest/core-client\";\n\n/**\n * Helper type to extract the type of an array\n */\nexport type GetArrayType<T> = T extends Array<infer TData> ? TData : never;\n\n/**\n * The type of a custom function that defines how to get a page and a link to the next one if any.\n */\nexport type GetPage<TPage> = (\n  pageLink: string,\n  maxPageSize?: number,\n) => Promise<{\n  page: TPage;\n  nextPageLink?: string;\n}>;\n\n/**\n * Options for the paging helper\n */\nexport interface PagingOptions<TResponse> {\n  /**\n   * Custom function to extract pagination details for crating the PagedAsyncIterableIterator\n   */\n  customGetPage?: GetPage<PaginateReturn<TResponse>[]>;\n}\n\n/**\n * Helper type to infer the Type of the paged elements from the response type\n * This type is generated based on the swagger information for x-ms-pageable\n * specifically on the itemName property which indicates the property of the response\n * where the page items are found. The default value is `value`.\n * This type will allow us to provide strongly typed Iterator based on the response we get as second parameter\n */\nexport type PaginateReturn<TResult> = TResult extends {\n  body: { value?: infer TPage };\n}\n  ? GetArrayType<TPage>\n  : Array<unknown>;\n\n/**\n * Helper to paginate results from an initial response that follows the specification of Autorest `x-ms-pageable` extension\n * @param client - Client to use for sending the next page requests\n * @param initialResponse - Initial response containing the nextLink and current page of elements\n * @param customGetPage - Optional - Function to define how to extract the page and next link to be used to paginate the results\n * @returns - PagedAsyncIterableIterator to iterate the elements\n */\nexport function paginate<TResponse extends PathUncheckedResponse>(\n  client: Client,\n  initialResponse: TResponse,\n  options: PagingOptions<TResponse> = {},\n): PagedAsyncIterableIterator<PaginateReturn<TResponse>> {\n  // Extract element type from initial response\n  type TElement = PaginateReturn<TResponse>;\n  let firstRun = true;\n  const itemName = \"value\";\n  const nextLinkName = \"nextLink\";\n  const { customGetPage } = options;\n  const pagedResult: PagedResult<TElement[]> = {\n    firstPageLink: \"\",\n    getPage:\n      typeof customGetPage === \"function\"\n        ? customGetPage\n        : async (pageLink: string) => {\n            const result = firstRun ? initialResponse : await client.pathUnchecked(pageLink).get();\n            firstRun = false;\n            checkPagingRequest(result);\n            const nextLink = getNextLink(result.body, nextLinkName);\n            const values = getElements<TElement>(result.body, itemName);\n            return {\n              page: values,\n              nextPageLink: nextLink,\n            };\n          },\n  };\n\n  return getPagedAsyncIterator(pagedResult);\n}\n\n/**\n * Gets for the value of nextLink in the body\n */\nfunction getNextLink(body: unknown, nextLinkName?: string): string | undefined {\n  if (!nextLinkName) {\n    return undefined;\n  }\n\n  const nextLink = (body as Record<string, unknown>)[nextLinkName];\n\n  if (typeof nextLink !== \"string\" && typeof nextLink !== \"undefined\") {\n    throw new Error(`Body Property ${nextLinkName} should be a string or undefined`);\n  }\n\n  return nextLink;\n}\n\n/**\n * Gets the elements of the current request in the body.\n */\nfunction getElements<T = unknown>(body: unknown, itemName: string): T[] {\n  const value = (body as Record<string, unknown>)[itemName] as T[];\n\n  // value has to be an array according to the x-ms-pageable extension.\n  // The fact that this must be an array is used above to calculate the\n  // type of elements in the page in PaginateReturn\n  if (!Array.isArray(value)) {\n    throw new Error(\n      `Couldn't paginate response\\n Body doesn't contain an array property with name: ${itemName}`,\n    );\n  }\n\n  return value ?? [];\n}\n\n/**\n * Checks if a request failed\n */\nfunction checkPagingRequest(response: PathUncheckedResponse): void {\n  const Http2xxStatusCodes = [\"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"226\"];\n  if (!Http2xxStatusCodes.includes(response.status)) {\n    throw createRestError(\n      `Pagination failed with unexpected statusCode ${response.status}`,\n      response,\n    );\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Client, HttpResponse } from \"@azure-rest/core-client\";\nimport {\n  CreateHttpPollerOptions,\n  LongRunningOperation,\n  LroResponse,\n  OperationState,\n  SimplePollerLike,\n  createHttpPoller,\n} from \"@azure/core-lro\";\nimport {\n  AnalyzeDocumentFromStream202Response,\n  AnalyzeDocumentFromStreamDefaultResponse,\n  AnalyzeDocumentFromStreamLogicalResponse,\n  BuildModel202Response,\n  BuildModelDefaultResponse,\n  BuildModelLogicalResponse,\n  ComposeModel202Response,\n  ComposeModelDefaultResponse,\n  ComposeModelLogicalResponse,\n  CopyModelTo202Response,\n  CopyModelToDefaultResponse,\n  CopyModelToLogicalResponse,\n  BuildClassifier202Response,\n  BuildClassifierDefaultResponse,\n  BuildClassifierLogicalResponse,\n  ClassifyDocumentFromStream202Response,\n  ClassifyDocumentFromStreamDefaultResponse,\n  ClassifyDocumentFromStreamLogicalResponse,\n} from \"./responses\";\n/**\n * Helper function that builds a Poller object to help polling a long running operation.\n * @param client - Client to use for sending the request to get additional pages.\n * @param initialResponse - The initial response.\n * @param options - Options to set a resume state or custom polling interval.\n * @returns - A poller object to poll for operation state updates and eventually get the final response.\n */\nexport async function getLongRunningPoller<\n  TResult extends BuildModelLogicalResponse | BuildModelDefaultResponse,\n>(\n  client: Client,\n  initialResponse: BuildModel202Response | BuildModelDefaultResponse,\n  options?: CreateHttpPollerOptions<TResult, OperationState<TResult>>,\n): Promise<SimplePollerLike<OperationState<TResult>, TResult>>;\nexport async function getLongRunningPoller<\n  TResult extends ComposeModelLogicalResponse | ComposeModelDefaultResponse,\n>(\n  client: Client,\n  initialResponse: ComposeModel202Response | ComposeModelDefaultResponse,\n  options?: CreateHttpPollerOptions<TResult, OperationState<TResult>>,\n): Promise<SimplePollerLike<OperationState<TResult>, TResult>>;\nexport async function getLongRunningPoller<\n  TResult extends CopyModelToLogicalResponse | CopyModelToDefaultResponse,\n>(\n  client: Client,\n  initialResponse: CopyModelTo202Response | CopyModelToDefaultResponse,\n  options?: CreateHttpPollerOptions<TResult, OperationState<TResult>>,\n): Promise<SimplePollerLike<OperationState<TResult>, TResult>>;\nexport async function getLongRunningPoller<\n  TResult extends BuildClassifierLogicalResponse | BuildClassifierDefaultResponse,\n>(\n  client: Client,\n  initialResponse: BuildClassifier202Response | BuildClassifierDefaultResponse,\n  options?: CreateHttpPollerOptions<TResult, OperationState<TResult>>,\n): Promise<SimplePollerLike<OperationState<TResult>, TResult>>;\nexport async function getLongRunningPoller<\n  TResult extends\n    | AnalyzeDocumentFromStreamLogicalResponse\n    | AnalyzeDocumentFromStreamDefaultResponse,\n>(\n  client: Client,\n  initialResponse: AnalyzeDocumentFromStream202Response | AnalyzeDocumentFromStreamDefaultResponse,\n  options?: CreateHttpPollerOptions<TResult, OperationState<TResult>>,\n): Promise<SimplePollerLike<OperationState<TResult>, TResult>>;\nexport async function getLongRunningPoller<\n  TResult extends\n    | ClassifyDocumentFromStreamLogicalResponse\n    | ClassifyDocumentFromStreamDefaultResponse,\n>(\n  client: Client,\n  initialResponse:\n    | ClassifyDocumentFromStream202Response\n    | ClassifyDocumentFromStreamDefaultResponse,\n  options?: CreateHttpPollerOptions<TResult, OperationState<TResult>>,\n): Promise<SimplePollerLike<OperationState<TResult>, TResult>>;\nexport async function getLongRunningPoller<TResult extends HttpResponse>(\n  client: Client,\n  initialResponse: TResult,\n  options: CreateHttpPollerOptions<TResult, OperationState<TResult>> = {},\n): Promise<SimplePollerLike<OperationState<TResult>, TResult>> {\n  const poller: LongRunningOperation<TResult> = {\n    requestMethod: initialResponse.request.method,\n    requestPath: initialResponse.request.url,\n    sendInitialRequest: async () => {\n      // In the case of Rest Clients we are building the LRO poller object from a response that's the reason\n      // we are not triggering the initial request here, just extracting the information from the\n      // response we were provided.\n      return getLroResponse(initialResponse);\n    },\n    sendPollRequest: async (path) => {\n      // This is the callback that is going to be called to poll the service\n      // to get the latest status. We use the client provided and the polling path\n      // which is an opaque URL provided by caller, the service sends this in one of the following headers: operation-location, azure-asyncoperation or location\n      // depending on the lro pattern that the service implements. If non is provided we default to the initial path.\n      const response = await client.pathUnchecked(path ?? initialResponse.request.url).get();\n      const lroResponse = getLroResponse(response as TResult);\n      lroResponse.rawResponse.headers[\"x-ms-original-url\"] = initialResponse.request.url;\n      return lroResponse;\n    },\n  };\n\n  options.resolveOnUnsuccessful = options.resolveOnUnsuccessful ?? true;\n  return createHttpPoller(poller, options);\n}\n\n/**\n * Converts a Rest Client response to a response that the LRO implementation understands\n * @param response - a rest client http response\n * @returns - An LRO response that the LRO implementation understands\n */\nfunction getLroResponse<TResult extends HttpResponse>(response: TResult): LroResponse<TResult> {\n  if (Number.isNaN(response.status)) {\n    throw new TypeError(`Status code of the response is not a number. Value: ${response.status}`);\n  }\n\n  return {\n    flatResponse: response,\n    rawResponse: {\n      ...response,\n      statusCode: Number.parseInt(response.status),\n      body: response.body,\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport DocumentIntelligence from \"./documentIntelligence\";\n\nexport * from \"./documentIntelligence\";\nexport * from \"./parameters\";\nexport * from \"./responses\";\nexport * from \"./clientDefinitions\";\nexport * from \"./isUnexpected\";\nexport * from \"./models\";\nexport * from \"./outputModels\";\nexport * from \"./paginateHelper\";\nexport * from \"./pollingHelper\";\n\nexport default DocumentIntelligence;\n"],"names":["createClientLogger","getClient","getPagedAsyncIterator","createRestError","createHttpPoller"],"mappings":"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"}